"""
Theory & Conceptual Questions

1‚Ä§What is a string in Python? Why are strings called sequences?
String‚Äì’® ’Ω’´’¥’æ’∏’¨’∂’•÷Ä’´ ’∞’°’ª’∏÷Ä’§’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ ’ß, ’∏÷Ä’® ’£÷Ä’æ’∏÷Ç’¥ ’ß ’π’°’Ø’•÷Ä’ø’∂’•÷Ä’´ ’¥’•’ª ('hello', "hello"):
Python‚Äì’∏÷Ç’¥ string‚Äì’® str ’§’°’Ω’´ ÷Ö’¢’µ’•’Ø’ø ’ß÷â


2.Explain the difference between:

2.1 String literals vs string objects
    String literal-’® ’°’µ’∂, ’´’∂’π ’£÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’Ø’∏’§’´ ’¥’•’ª ’π’°’Ø’•÷Ä’ø’∂’•÷Ä’∏’æ÷â
    word = "hi"

    String object-’® String literal-’´÷Å ’Ω’ø’•’≤’Æ’æ’°’Æ  ÷Ö’¢’µ’•’Ø’ø ’∞’´’∑’∏’≤’∏÷Ç’©’µ’°’∂ ’¥’•’ª÷â
    ’•÷Ä’Ø’∏÷Ç’Ω’∂ ’ß’¨ str ÷Ö’¢’µ’•’Ø’ø ’•’∂ ’∞’´’∑’∏’≤’∏÷Ç’©’µ’°’∂ ’¥’•’ª,
    ’∫’°÷Ä’¶’°’∫’•’Ω literal-’® ’°’µ’∂ ’£÷Ä’°’æ’∏÷Ä ’°÷Ä’ø’°’∞’°’µ’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’ß ’Ø’∏’§’∏÷Ç’¥, ’´’Ω’Ø object-’® ’°’µ’∂, ’´’∂’π Python-’® ’∫’°’∞’∏÷Ç’¥ ’ß RAM‚Äì’∏÷Ç’¥÷â
   """
from xndirner_list import words
from xndirner_string import longest_word

a = "hello"
b = str("hello")
print(type(a))  # <class 'str'>
print(type(b))  # <class 'str'>

"""
    2.2 Unicode vs ASCII vs bytes
    ASCII
    ’ç’ø’°’∂’§’°÷Ä’ø ’Ø’∏’§’°’æ’∏÷Ä’∏÷Ç’¥ 7-bit, ’∏÷Ä’® ’Ø’°÷Ä’∏’≤ ’ß ’∂’•÷Ä’Ø’°’µ’°÷Å’∂’•’¨ ’¥’´’°’µ’∂ 128 ’Ω’´’¥’æ’∏’¨’ù ’°’∂’£’¨’•÷Ä’•’∂ ’ø’°’º’•÷Ä, ’©’æ’•÷Ä, ’∂’∑’°’∂’∂’•÷Ä÷â
    ’ï÷Ä’´’∂’°’Ø’ù 'A' ‚Üí 65, 'a' ‚Üí 97÷â
    ’Ä’´’¥’∂’°’Ø’°’∂’∏÷Ç’¥ ’¥’´’°’µ’∂ ’¨’°’ø’´’∂’°’ø’°’º ’ø’•÷Ñ’Ω’ø’•÷Ä’´ ’∞’°’¥’°÷Ä ’ß÷â
"""
s = "Hello"
print(ord('H'))  # 72
"""
    Unicode
    ’Ä’°’¥’®’∂’§’∞’°’∂’∏÷Ç÷Ä ’Ø’∏’§’°’æ’∏÷Ä’∏÷Ç’¥, ’∏÷Ä’® ’Ø’°÷Ä’∏’≤ ’ß ’∂’•÷Ä’Ø’°’µ’°÷Å’∂’•’¨ ’¢’∏’¨’∏÷Ä ’¨’•’¶’∏÷Ç’∂’•÷Ä’´ ’ø’°’º’•÷Ä’®, ’Ω’´’¥’æ’∏’¨’∂’•÷Ä’® ÷á ’ß’¥’∏’ª’´’∂’•÷Ä’®÷â
    Python 3‚Äì’∏÷Ç’¥ ’¢’∏’¨’∏÷Ä str ÷Ö’¢’µ’•’Ø’ø’∂’•÷Ä’® ’°÷Ä’§’•’∂ Unicode ’ø’∏’≤’•÷Ä ’•’∂÷â
"""
s = "‘±’∂’∂’° üòä"
print(s)          # ‘±’∂’∂’° üòä
print(len(s))     # 6 (’∞’°’∑’æ’∏÷Ç’¥ ’ß ’ø’•’Ω’°’∂’•’¨’´ ’Ω’´’¥’æ’∏’¨’∂’•÷Ä’®)
"""
    Bytes
    Bytes ‚Äì ’¢’°’µ’©’•÷Ä’´ ’∑’°÷Ä÷Ñ, ’ø’æ’µ’°’¨’∂’•÷Ä ’∏÷Ä’∏’∂÷Ñ ÷Ö’£’ø’°’£’∏÷Ä’Æ’æ’∏÷Ç’¥ ’•’∂ ÷Å’°’∂÷Å’°’µ’´’∂ ÷É’∏’≠’°’∂÷Å’∏÷Ç’¥’∂’•÷Ä’´, ÷Ü’°’µ’¨’•÷Ä’´ ’®’∂’©’•÷Ä÷Å’¥’°’∂ ’Ø’°’¥ ’Ø’∏’§’°’æ’∏÷Ä’¥’°’∂/’§’•’Ø’∏’§’°’æ’∏÷Ä’¥’°’∂ ’™’°’¥’°’∂’°’Ø÷â
    Bytes‚Äì’® ’Ω’ø’•’≤’Æ’æ’∏÷Ç’¥ ’ß .encode() ’¥’•’©’∏’§’∏’æ, ÷á ’∞’∂’°÷Ä’°’æ’∏÷Ä ’ß ’æ’•÷Ä’°’§’°÷Ä’±’∂’•’¨ ’ø’∏’≤’ù .decode()-’∏’æ÷â
"""
s = "‘±’∂’∂’° üòä"
b = s.encode("utf-8")  # ’ø’∏’≤ ‚Üí bytes
print(b)               # b'\xd4\xb1\xd5\xb6\xd5\xa1\xd5\xb6\xd5\xa1 \xf0\x9f\x98\x8a'

s2 = b.decode("utf-8")  # bytes ‚Üí str
print(s2)                # ‘±’∂’∂’° üòä
"""
    2.3 Immutable vs mutable objects
    Immutable ’∂’∑’°’∂’°’Ø’∏÷Ç’¥ ’ß, ’∏÷Ä ’Ω’ø’•’≤’Æ’æ’•’¨’∏÷Ç÷Å ’∞’•’ø’∏ ’π’•’Ω ’Ø’°÷Ä’∏’≤ ÷É’∏’≠’•’¨ ’§÷Ä’°’∂÷Å ’∂’•÷Ä÷Ñ’´’∂ ’°÷Ä’™’•÷Ñ’®÷â
    ‘µ’©’• ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’•’Ω ¬´÷É’∏÷É’∏’≠’•’¨¬ª, Python‚Äì’® ’´÷Ä’°’Ø’°’∂’∏÷Ç’¥ ’Ω’ø’•’≤’Æ’∏÷Ç’¥ ’ß ’∂’∏÷Ä ÷Ö’¢’µ’•’Ø’ø÷â
    """
    # String ‚Äì ’°’∂÷É’∏÷É’∏’≠’•’¨’´

s = "hello"
print(id(s))  #  ’ï’¢’µ’•’Ø’ø’´ ’∞’°’Ω÷Å’• ’∞’´’∑’∏’≤’∏÷Ç’©’µ’°’∂ ’¥’•’ª
s = s + " world"  # ’ç’ø’•’≤’Æ’æ’∏÷Ç’¥ ’ß ’∂’∏÷Ä ÷Ö’¢’µ’•’Ø’ø
print(id(s))  #  ‘±’µ’¨ id ’ß


"""
    ‘±’µ’Ω’ø’•’≤ s-’® ’∂’∏÷Ä ’°÷Ä’™’•÷Ñ ’Ω’ø’°÷Å’°’æ, ’¢’°’µ÷Å ’∂’°’≠’Ø’´’∂’´ ’æ÷Ä’° ÷É’∏÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂ ’π’´ ’Ø’°’ø’°÷Ä’æ’•’¨÷â
          
        
    Mutable
    Mutable ’∂’∑’°’∂’°’Ø’∏÷Ç’¥ ’ß, ’∏÷Ä ’°÷Ä’™’•÷Ñ’® ’Ø’°÷Ä’•’¨’´ ’ß ÷É’∏÷É’∏’≠’•’¨ ’ø’•’≤’∏÷Ç’¥, ’°’º’°’∂÷Å ’∂’∏÷Ä ÷Ö’¢’µ’•’Ø’ø ’Ω’ø’•’≤’Æ’•’¨’∏÷Ç÷â
"""
lst = [1, 2, 3]
print(id(lst))  # ’ï’¢’µ’•’Ø’ø’´ ’∞’°’Ω÷Å’•
lst.append(4)   # ’ì’∏÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂ ’ø’•’≤’∏÷Ç’¥
print(lst)      # [1, 2, 3, 4]
print(id(lst))  # ’∂’∏÷Ç’µ’∂ id-’∂ ’¥’∂’°÷Å

"""
‘±’µ’Ω’ø’•’≤ lst-’® ÷É’∏’≠’æ’•÷Å ’∂’∏÷Ç’µ’∂ ÷Ö’¢’µ’•’Ø’ø’´ ’æ÷Ä’°, ’∂’∏÷Ä ÷Ö’¢’µ’•’Ø’ø ’π’´ ’Ω’ø’•’≤’Æ’æ’•’¨÷â



3.Show examples of using:

single quotes
"""
s1 = '‘≤’°÷Ä÷á'
print(s1)   # ‘≤’°÷Ä÷á
# ’Ä’°÷Ä’¥’°÷Ä ’ß, ’•’©’• ’ø’•÷Ñ’Ω’ø’´ ’¥’•’ª ’Ø’°’∂ ’Ø÷Ä’Ø’∂’°’Ø’´ ’π’°’Ø’•÷Ä’ø’∂’•÷Ä÷â
s = 'He said: "Hello!"'


# double quotes
s2 = "Hello world"
print(s2)   # Hello world
# ’Ä’°÷Ä’¥’°÷Ä ’ß, ’•’©’• ’ø’•÷Ñ’Ω’ø’´ ’¥’•’ª ’Ø’°’∂ ’¥’•’Ø’°’Ø’°’∂ ’π’°’Ø’•÷Ä’ø’∂’•÷Ä÷â
s = "It's a nice day"
    # triple quotes (multiline)
# ’ï’£’ø’°’£’∏÷Ä’Æ’æ’∏÷Ç’¥ ’ß ’¢’°’¶’¥’°’ø’∏’≤ ’ø’•÷Ñ’Ω’ø’•÷Ä’´ ’∞’°’¥’°÷Ä÷â
s3 = """    ’ç’°
    ’¢’°’¶’¥’°’ø’∏’≤
    ’ø’•÷Ñ’Ω’ø ’ß"""
print(s3)

    # raw strings (r"text")
# Raw string‚Äì’® ’π’´ ’¥’•’Ø’∂’°’¢’°’∂’∏÷Ç’¥ escape ’Ω’´’¥’æ’∏’¨’∂’•÷Ä’® (\n, \t ÷á ’°’µ’¨’∂)÷â
s4 = r"C:\new\test.txt"
print(s4)   # C:\new\test.txt

    # When would you prefer each?
# '...' ÷á "..." ‚Üí ‘∏’Ω’ø ’∞’°÷Ä’¥’°÷Ä’∏÷Ç’©’µ’°’∂, ’Ø’°’≠’æ’°’Æ ’∏÷Ä ’π’°’Ø’•÷Ä’ø’∂’•÷Ä’∂ ’∏÷Ç’∂’•’∂÷Ñ ’ø’•÷Ñ’Ω’ø’´ ’¥’•’ª÷â
# '''...''' ’Ø’°’¥ """...""" ‚Üí ‘≤’°’¶’¥’°’ø’∏’≤ ’ø’•÷Ñ’Ω’ø÷â
# r"..." ‚Üí File path‚Äì’•÷Ä, regex‚Äì’•÷Ä, ’∏÷Ä’ø’•’≤ ’π’•’∂÷Ñ ’∏÷Ç’¶’∏÷Ç’¥, ’∏÷Ä escape‚Äì’∂’•÷Ä’® ’¥’∑’°’Ø’æ’•’∂÷â


# 4.List at least 7 escape sequences and their meanings. Why might \n behave differently on Windows vs Linux?
# 1. \'  ’Ñ’•’Ø ’π’°’Ø’•÷Ä’ø
print('It\'s a nice day')   # It's a nice day

# 2. \"  ‘ø÷Ä’Ø’∂’°’Ø’´ ’π’°’Ø’•÷Ä’ø
print("He said: \"Hello\"") # He said: "Hello"

# 3. \\  ’Ä’•’ø’®’∂’©’°÷Å ’£’´’Æ
print("C:\\Users\\Anna")    # C:\Users\Anna

# 4. \n  ’Ü’∏÷Ä ’ø’∏’≤
print("Line1\nLine2")
# ‘±÷Ä’§’µ’∏÷Ç’∂÷Ñ’ù
# Line1
# Line2

# 5. \t  Tab
print("Column1\tColumn2")
# ‘±÷Ä’§’µ’∏÷Ç’∂÷Ñ’ù Column1   Column2

# 6. \r  Carriage return
print("Hello\rWorld")
# ‘±÷Ä’§’µ’∏÷Ç’∂÷Ñ’ù World
# (’°’µ’Ω’ø’•’≤ 'Hello'-’∂ ’ª’∂’ª’æ’•÷Å, ’∏÷Ä’∏’æ’∞’•’ø÷á cursor-’® ’æ’•÷Ä’°’§’°÷Ä’±’°’æ ’ø’∏’≤’´ ’Ω’Ø’´’¶’¢)

# 7. \b  Backspace
print("Helloo\b!")
# ‘±÷Ä’§’µ’∏÷Ç’∂÷Ñ’ù Hello!

# 8. \f  Form feed
print("Page1\fPage2")
# ‘±÷Ä’§’µ’∏÷Ç’∂÷Ñ’ù Page1 (’ß’ª’°÷É’∏’≠’∏÷Ç’¥) Page2
# (’ø’•÷Ä’¥’´’∂’°’¨’∏÷Ç’¥ ’£’∏÷Ç÷Å’• ’∫’°÷Ä’¶’°’∫’•’Ω space ’•÷Ä÷á’°)

# 9. \u1234  Unicode ’Ω’´’¥’æ’∏’¨
print("\u0531")  # ‘± (’Ä’°’µ’Ø’°’Ø’°’∂ "‘±")


# 5.Explain with examples:

    # Positive vs negative indexing
# Python‚Äì’∏÷Ç’¥ string (÷á ’¥’µ’∏÷Ç’Ω sequence‚Äì’∂’•÷Ä’®) ’∏÷Ç’∂’•’∂ ’´’∂’§’•÷Ñ’Ω’°’æ’∏÷Ä’∏÷Ç’¥‚Ä§
# ‘¥÷Ä’°’Ø’°’∂ ’´’∂’§’•÷Ñ’Ω’∂’•÷Ä’® ’∞’°’∑’æ’∏÷Ç’¥ ’•’∂ ’±’°’≠’´÷Å ‚Üí ’°’ª (0, 1, 2 ...)
# ‘≤’°÷Å’°’Ω’°’Ø’°’∂ ’´’∂’§’•÷Ñ’Ω’∂’•÷Ä’® ’∞’°’∑’æ’∏÷Ç’¥ ’•’∂ ’°’ª’´÷Å ‚Üí ’±’°’≠ (-1, -2, -3 ...)
l= "Python"
print(l[0])   # 'P'   (’°’º’°’ª’´’∂ ’Ω’´’¥’æ’∏’¨)
print(l[2])   # 't'   (’•÷Ä÷Ä’∏÷Ä’§ ’Ω’´’¥’æ’∏’¨)
print(l[-1])  # 'n'   (’æ’•÷Ä’ª’´’∂ ’Ω’´’¥’æ’∏’¨)
print(l[-3])  # 'h'   (’•÷Ä÷Ä’∏÷Ä’§’® ’æ’•÷Ä’ª’´÷Å)

    # Slice s[a:b:c] (start, stop, step)
 # Slice s[a:b:c] (start, stop, step)
# [start:stop:step] ‚Üí ’æ’•÷Ä÷Å’∂’∏÷Ç’¥ ’ß ’ø’∏’≤’´ ’∞’°’ø’æ’°’Æ’®‚Ä§
# start ‚Äì ’∏÷Ä ’´’∂’§’•÷Ñ’Ω’´÷Å ’Ω’Ø’Ω’´ (’∂’•÷Ä’°’º’µ’°’¨)
# stop ‚Äì ’∏÷Ä’ø’•’≤ ’Ø’°’∂’£’∂’´ (’¢’°÷Å’°’º’µ’°’¨)
# step ‚Äì ÷Ñ’°’∂’´ ÷Ñ’°’µ’¨’∏’æ ’°’º’°’ª’°’∂’°
k = "abcdefgh"
print(k[2:6])    # 'cdef'   (’Ω’Ø’Ω’∏÷Ç’¥ ’ß 2‚Äì’´÷Å, ’Ø’°’∂’£’∂’∏÷Ç’¥ ’ß 6‚Äì’´÷Å ’°’º’°’ª)
print(k[:4])     # 'abcd'   (’Ω’Ø’Ω’∏÷Ç’¥ ’ß 0‚Äì’´÷Å ’¥’´’∂’π÷á 4‚Äì’´÷Å ’°’º’°’ª)
print(k[::2])    # 'aceg'   (’µ’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’•÷Ä’Ø÷Ä’∏÷Ä’§ ’Ω’´’¥’æ’∏’¨)
print(k[::-1])   # 'hgfedcba' (’∑÷Ä’ª’∏÷Ç’¥ ’ß ’ø’∏’≤’®)
    # What happens if indices go out of range?
# ’•’©’• ’π’Ø’° ’°’µ’§ ’´’∂’§’•÷Ñ’Ω’® ‚Üí IndexError÷â
s = "abc"
# print(s[5])   # IndexError: string index out of range

# Slice‚Äì’∏÷Ç’¥ (s[a:b:c]) ‚Üí Python‚Äì’® ’Ω’≠’°’¨ ’π’´ ’£÷Å’∏÷Ç’¥, ’∏÷Ç’≤’≤’°’Ø’´ ’Ø’ø÷Ä’æ’°’Æ÷Ñ’´ ’π’°÷É’∏’æ ’æ’•÷Ä’°’§’°÷Ä’±’∂’∏÷Ç’¥ ’ß ’´’∂’π ’Ø’°÷â
s = "abc"

print(s[0:10])   # 'abc'
print(s[5:10])   # ''      (’§’°’ø’°÷Ä’Ø ’ø’∏’≤)



# 6.Strings are immutable. Prove it with code. How can we "modify" a string if it is immutable?
# ’ï÷Ä’´’∂’°’Ø
s = "hello"
print(id(s))   # ’∞’´’∑’∏’≤’∏÷Ç’©’µ’°’∂ ’∞’°’Ω÷Å’• (object ID)

# ’ì’∏÷Ä’±’•’∂÷Ñ ÷É’∏÷É’∏’≠’•’¨ ’°’º’°’ª’´’∂ ’Ω’´’¥’æ’∏’¨’®
try:
    s[0] = "H"
except TypeError as e:
    print(e)                   #'str' object does not support item assignment


# ‘±’µ’Ω’´’∂÷Ñ’∂’ù ’¥’•’Ø ’Ω’´’¥’æ’∏’¨’´’∂ ’°÷Ä’™’•÷Ñ ’ø’°’¨ ’π’´ ’©’∏÷Ç’µ’¨’°’ø÷Ä’æ’∏÷Ç’¥÷â

# ‘ª’∂’π’∫’•’Ω ’ß ’•÷Ä÷á’∏÷Ç’¥ ’°’∂÷É’∏÷É’∏’≠’•’¨’´’∏÷Ç’©’µ’∏÷Ç’∂’®
s = "hello"
print(id(s))   # ÷Ö÷Ä’´’∂’°’Ø’ù 140338573743024

s = s + " world"   # ’Ω’ø’•’≤’Æ’∏÷Ç’¥ ’ß ’Ü’à’ê ÷Ö’¢’µ’•’Ø’ø
print(s)           # "hello world"
print(id(s))       # ’°’µ’¨ ID (’∂’∏÷Ä string object)


# ’ç’° ’°’∫’°÷Å’∏÷Ç÷Å’∏÷Ç’¥ ’ß, ’∏÷Ä string‚Äì’® ’π’´ ÷É’∏÷É’∏’≠’æ’•’¨ ’ø’•’≤’∏÷Ç’¥, ’°’µ’¨ ’Ω’ø’•’≤’Æ’æ’•’¨ ’ß ’∂’∏÷Ä string ÷Ö’¢’µ’•’Ø’ø÷â

#‘ª’∂’π’∫’•’Ω ‚Äú÷É’∏÷É’∏’≠’•’¨‚Äù string, ’•’©’• ’°’µ’∂ immutable ’ß?
# ’ç’ø’•’≤’Æ’•’¨ ’∂’∏÷Ä string replace‚Äì’∏’æ ’Ø’°’¥ concatenation‚Äì’∏’æ

s = "pillow"
s = s.replace("p", "w")
print(s)   # "willow"

# ‘ø’ø÷Ä’•’¨ (slice) ’∏÷Ç ’∂’∏÷Ä’∏’æ ’∞’°’æ’°÷Ñ’•’¨

s = "hello"
s = "H" + s[1:]
print(s)   # "Hello"


# ’ì’∏’≠’°’Ø’•÷Ä’∫’•’¨ list ‚Üí ÷É’∏÷É’∏’≠’•’¨ ‚Üí ’∂’∏÷Ä’´÷Å ’¥’´’°÷Å’∂’•’¨

s = "hello"
lst = list(s)     # ['h', 'e', 'l', 'l', 'o']
lst[0] = "H"
s = "".join(lst)
print(s)   # "Hello"


# ’à÷Ç÷Ä’•’¥’∂’ù string‚Äì’® ’¥’´’∑’ø immutable ’ß, ’´’Ω’Ø ‚Äú÷É’∏÷É’∏’≠’•’¨’®‚Äù ’´÷Ä’°’Ø’°’∂’∏÷Ç’¥ ’∂’∑’°’∂’°’Ø’∏÷Ç’¥ ’ß ’Ω’ø’•’≤’Æ’•’¨ ’∂’∏÷Ä string ÷Ö’¢’µ’•’Ø’ø÷â



# 7.Compare the three formatting techniques:

    # % formatting
    # .format() method
    # f-strings Which one is most Pythonic today, and why?

# 1. % formatting (’∞’´’∂, C-’∑ —Å—Ç–∏l’´)

# ’ï’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß % ÷Ö’∫’•÷Ä’°’ø’∏÷Ä, ’´’∂’π’∫’•’Ω C ’¨’•’¶’æ’∏÷Ç’¥‚Ä§
name = "‘±’∂’∂’°"
age = 24
print("‘±’∂’∏÷Ç’∂’® %s ’ß, ’ø’°÷Ä’´÷Ñ’® %d" % (name, age))
# ‘±’∂’∏÷Ç’∂’® ‘±’∂’∂’° ’ß, ’ø’°÷Ä’´÷Ñ’® 24

# ’ä’°÷Ä’¶, ’∞’´’∂ Python ’Ø’∏’§’∏÷Ç’¥ ’∑’°’ø ’ø’°÷Ä’°’Æ’æ’°’Æ ’ß÷â
# ‘±’∂’∞’°÷Ä’¥’°÷Ä ’ß ’¢’°÷Ä’§ ’°÷Ä’ø’°’∞’°’µ’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’Ø’°’¥ ’¢’°’¶’¥’°’©’´’æ ÷É’∏÷É’∏’≠’°’Ø’°’∂’∂’•÷Ä’´ ’§’•’∫÷Ñ’∏÷Ç’¥÷â
# ’ç’≠’°’¨’∂’•÷Ä’´ ’∞’°’æ’°’∂’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ ’Ø’°, ’•’©’• placeholder‚Äì’∂’•÷Ä’® ’π’•’∂ ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂’∏÷Ç’¥÷â


#2. .format() ’¥’•’©’∏’§ (Python 2.6+ / 3+)
# ’ï’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß .format() ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂‚Ä§

name = "‘±’∂’∂’°"
age = 24
print("‘±’∂’∏÷Ç’∂’® {} ’ß, ’ø’°÷Ä’´÷Ñ’® {}".format(name, age))
print("‘±’∂’∏÷Ç’∂’® {0} ’ß, ’ø’°÷Ä’´÷Ñ’® {1}".format(name, age))
print("‘±’∂’∏÷Ç’∂’® {n} ’ß, ’ø’°÷Ä’´÷Ñ’® {a}".format(n=name, a=age))

# ‘±’æ’•’¨’´ ’≥’Ø’∏÷Ç’∂ ’ß, ’Ø’°÷Ä’∏’≤ ’•’Ω ÷É’∏÷É’∏’≠’°’Ø’°’∂’∂’•÷Ä’® ’ø’•’≤’°’§÷Ä’•’¨ ’®’Ω’ø ’´’∂’§’•÷Ñ’Ω’´ ’Ø’°’¥ ’°’∂’∏÷Ç’∂’∏’æ÷â
# ‘ø’°÷Ä’•’¨’´ ’ß ’±÷á’°’π’°÷É’•’¨ ’©’æ’•÷Ä, alignment, padding÷â
# ‘±’æ’•’¨’´ ’•÷Ä’Ø’°÷Ä ’ß ’Ø’∏’§’®, ÷Ñ’°’∂ ’∫’•’ø÷Ñ ’ß÷â


# 3. f-strings (Python 3.6+)
# ’ï’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß f"" ’Ω’´’∂’ø’°÷Ñ’Ω, ÷á ’∏÷Ç’≤’≤’°’Ø’´ ’∂’•÷Ä’Ω’∏÷Ç’¥ {}‚Äì’∏÷Ç’¥ ’£÷Ä’∏÷Ç’¥ ’•’Ω ’°÷Ä’ø’°’∞’°’µ’ø’∏÷Ç’©’µ’∏÷Ç’∂’®÷â
name = "‘±’∂’∂’°"
age = 24
print(f"‘±’∂’∏÷Ç’∂’® {name} ’ß, ’ø’°÷Ä’´÷Ñ’® {age}")
print(f"{name.upper()} ’∞’°’ª’∏÷Ä’§ ’ø’°÷Ä’´ ’Ø’¨’´’∂’´ {age + 1} ’ø’°÷Ä’•’Ø’°’∂")

# ‘±’¥’•’∂’°’Ø’°÷Ä’≥ ’∏÷Ç ’®’∂’©’•’º’∂’•’¨’´ ’Ω’´’∂’ø’°÷Ñ’Ω÷â
# ‘π’∏÷Ç’µ’¨ ’ß ’ø’°’¨’´’Ω ’°÷Ä’ø’°’∞’°’µ’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä ’∂’•÷Ä’Ω’∏÷Ç’¥ ({age+1}, {name.upper()})÷â
# ‘±’æ’•’¨’´ ’°÷Ä’°’£ ’ß, ÷Ñ’°’∂ .format() ÷á %÷â
# ‘±’∑’≠’°’ø’∏÷Ç’¥ ’ß ’¥’´’°’µ’∂ Python 3.6+÷â

# ’à’û÷Ä’® ’ß ‚ÄúPythonic‚Äù ’°’µ’Ω÷Ö÷Ä
# f-strings (f"") ‚Äî ’∞’°’¥’°÷Ä’æ’∏÷Ç’¥ ’ß Pythonic ÷á ’™’°’¥’°’∂’°’Ø’°’Ø’´÷Å ’¨’°’æ’°’£’∏÷Ç’µ’∂ ’ø’°÷Ä’¢’•÷Ä’°’Ø’®‚Ä§
# ‘ø’°÷Ä’§’°÷Å’æ’∏’≤ ’ß,
# ‘±÷Ä’°’£ ’ß,
# ‘π’∏÷Ç’µ’¨ ’ß ’ø’°’¨’´’Ω inline ’°÷Ä’ø’°’∞’°’µ’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä÷â


# 8.Explain the difference between split(), partition(), and rsplit(). What‚Äôs the difference between find() and index()?
# 1. split(sep, maxsplit)
# ‘ø’ø÷Ä’ø’∏÷Ç’¥ ’ß ’ø’∏’≤’® ’¢’°’™’°’∂’°÷Ä’°÷Ä’∏’æ ‚Üí ’æ’•÷Ä’°’§’°÷Ä’±’∂’∏÷Ç’¥ ’ß list÷â
# maxsplit ‚Üí ÷Ñ’°’∂’´ ’°’∂’£’°’¥ ’¢’°’™’°’∂’´ (’±’°’≠’´÷Å)÷â

s = "a,b,c,d"
print(s.split(","))      # ['a', 'b', 'c', 'd']
print(s.split(",", 2))   # ['a', 'b', 'c,d']  (’¥’°÷Ñ’Ω’´’¥’∏÷Ç’¥ 2 ’Ø’ø÷Ä’æ’°’Æ÷Ñ)

# 2. rsplit(sep, maxsplit)
# ’Ü’∏÷Ç’µ’∂’®, ’¢’°’µ÷Å ’¢’°’™’°’∂’∏÷Ç’¥’® ’Ω’Ø’Ω’∏÷Ç’¥ ’ß ’°’ª’´÷Å÷â
s = "a,b,c,d"
print(s.rsplit(",", 2))  # ['a,b', 'c', 'd']  (’¥’°÷Ñ’Ω’´’¥’∏÷Ç’¥ 2 ’Ø’ø÷Ä’æ’°’Æ÷Ñ ’°’ª’´÷Å)

# 3. partition(sep)
# ‘≥’ø’∂’∏÷Ç’¥ ’ß ’°’º’°’ª’´’∂ ’¢’°’™’°’∂’°÷Ä’°÷Ä’´ ’ø’•’≤’®÷â
# ’é’•÷Ä’°’§’°÷Ä’±’∂’∏÷Ç’¥ ’ß 3-’¥’°’Ω’°’∂’∏÷Å tuple’ù (’¥’´’∂’π÷á, ’¢’°’™’°’∂’°÷Ä’°÷Ä, ’∞’•’ø’∏)÷â
s = "a,b,c,d"
print(s.partition(","))   # ('a', ',', 'b,c,d')
print(s.rpartition(","))  # ('a,b,c', ',', 'd') (’°’ª’´÷Å ’°’º’°’ª’´’∂’®)
# ‘±’µ’Ω’´’∂÷Ñ’∂’ù split/rsplit ’ø’°’¨’´’Ω ’•’∂ list,
# partition/rpartition ’ø’°’¨’´’Ω ’•’∂ 3-’¥’°’Ω tuple÷â



# Fundamental Coding Exercises
# 1.Create strings using all possible literal notations. Create a raw string showing a Windows file path.
# 1) ’ç’∏’æ’∏÷Ä’°’Ø’°’∂ string-’•÷Ä
s1 = 'spam'
s2 = "spam"
# 2) ‘≤’°’¶’¥’°’ø’∏’≤
s3 = '''spam
            eggs
         '''
s4 = """spam
            eggs
         """
# 3) Escape-’∂’•÷Ä’∏’æ
s5 = 'line1\nline2\tTabbed'  # \n ’∂’∏÷Ä ’ø’∏’≤, \t tab
# 4) Unicode escape-’∂’•÷Ä
s6 = '\u0531\u0561'  # '‘±’°' (’Ø’°’∂’π Unicode ’Ø’∏’§’•÷Ä’∏’æ)
s7 = '\N{GREEK SMALL LETTER PI}'  # 'œÄ'
# 5) ’Ä’´’∂-’∏’≥’´ "u" ’∂’°’≠’°’Æ’°’∂÷Å (Python 3-’∏÷Ç’¥ ’∂’∏÷Ç’µ’∂’∫’•’Ω ’Ø’°)
# Python 2-’∏÷Ç’¥ (’∏÷Ä’ø’•’≤ ’§’•’º ’Ø’°÷Ä str ÷á unicode ’ø’´’∫’•÷Ä’´ ’ø’°÷Ä’¢’•÷Ä’∏÷Ç’©’µ’∏÷Ç’∂) u"..." ’∂’∑’°’∂’°’Ø’∏÷Ç’¥ ’ß÷Ä Unicode ’ø’∏’≤÷â
# Python 3-’∏÷Ç’¥ ’¢’∏’¨’∏÷Ä string-’•÷Ä’® ’°÷Ä’§’•’∂ Unicode ’•’∂, ’∏÷Ç’Ω’ø’´ u ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨’® ’°’µ’¨÷á’Ω ’∫’°÷Ä’ø’°’§’´÷Ä ’π’ß÷â ‘±’µ’∂ ’∫’°÷Ä’¶’°’∫’•’Ω ’®’∂’§’∏÷Ç’∂’æ’∏÷Ç’¥ ’ß, ’∏÷Ä’∫’•’Ω’¶’´ ’∞’´’∂ ’Ø’∏’§’® ’°’∑’≠’°’ø’´ ’°’º’°’∂÷Å ’Ω’≠’°’¨’´÷â
s8 = u"unicode string"

# 6) Raw string-’•÷Ä (backslash-’∂’•÷Ä’® ’π’•’∂ ’¥’•’Ø’∂’°’¢’°’∂’æ’∏÷Ç’¥)
s9 = r'C:\new\name\test'  # \n ’π’´ ’§’°’º’∂’∏÷Ç’¥ ’∂’∏÷Ä ’ø’∏’≤, ’¥’∂’∏÷Ç’¥ ’ß \n
s10 = R"regex:\d+\w*"  # R ’ß’¨ ’∂’∏÷Ç’µ’∂’∂ ’ß

# 7) f-string-’•÷Ä (’±÷á’°’π’°÷É’∏÷Ç’¥ ’ø’•’≤’∏÷Ç’¥)
name = "Anna"
s11 = f"Hello, {name}!"  # ’∂’•÷Ä’§÷Ä’æ’°’Æ ’°÷Ä’ø’°’∞’°’µ’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä

# 8) ’Ä’°’¥’°’Ø÷Å’æ’°’Æ ’∂’°’≠’°’Æ’°’∂÷Å’∂’•÷Ä
path = r"C:\Users\Anna"
s12 = fr"User path: {path}\files\{2 + 2}"  # raw + f ’¥’´’°’Ω’´’∂ (fr ’Ø’°’¥ rf)

# 9) ‘≤’°’¶’¥’°’ø’∏’≤ raw (regex/’∏÷Ç’≤’´’∂’•÷Ä’´ ’∞’°’¥’°÷Ä ’∞’°÷Ä’¥’°÷Ä)
s13 = r"""C:\Program Files\My App\bin\tool.exe
    C:\Windows\System32"""

# 10) Bytes literal (’Ω’° string ’π’ß, ’°’µ’¨ bytes)
# b1 = b'spam'
# print(b1)          # b'spam'
# print(type(b1))    # <class 'bytes'>
# Byte ’¥’•’Ø ’¥’•’Ø ’ø’°÷Ä÷Ä’´’∂ ’∞’°’Ω’∂’•’¨’´’Ω ’Ω’ø’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ’°’¥’¢’∏’≤’ª ’©’´’æ (0-255)

# print(b1[0])       # 115  (ASCII ’Ø’∏’§’® 's'-’´ ’∞’°’¥’°÷Ä)
b1 = b'spam'  # ’ø’•÷Ñ’Ω’ø’ù byte-’∂’•÷Ä’´ ’ø’•’Ω÷Ñ’∏’æ

# 2‚Ä§Given s = "Learning Python is fun", extract:
# "Learning"
# "Python"
# "fun"
# Every second character
# The string reversed

s = "Learning Python is fun"

a1 = s[0:8]
a2 = s[9:15]
a3 = s[-3:]
a4 = s[::2]
a5 = s[::-1]
# print(a5)
# 3.Print the following with a single string literal:

# Line1
#    Line2
#        Line3


print("""Line1
    Line2
        Line3
""")

# 4. Check if "thon" is inside "Python". Repeat "Py" 5 times. Concatenate "Data" and "Science" with a space.

print("thon" in "Python")
print("Py" * 5)
x = "Data" + " " + "Science"
print(x)

# 5.Convert an integer, float, and list into strings using str(). Convert back where possible.
num_int = 42
num_float = 3.14
num_list = [1, 2, 3]

# Convert to string
str_int = str(num_int)
str_float = str(num_float)
str_list = str(num_list)

print(str_int, type(str_int))
print(str_float, type(str_float))
print(str_list, type(str_list))

# back
int_back = int(str_int)
float_back = float(str_float)
import ast

list_back = ast.literal_eval(str_list)

print(int_back, type(int_back))
print(float_back, type(float_back))
print(list_back, type(list_back))

# Working with String Methods
    # Working with String Methods
    # Given:
    # sentence = "  Python makes STRING handling Easy and Fun!  "
    # Perform:

    # ‚Ä§‚Ä§‚Ä§Normalize (strip spaces, make lowercase).
    # ’Ä’•’º’°÷Å’∂’•’¨ ’ø’∏’≤’´ ’Ω’Ø’¶’¢’∏÷Ç’¥ ÷á ’æ’•÷Ä’ª’∏÷Ç’¥ ’£’ø’∂’æ’∏’≤ ’°’æ’•’¨’∏÷Ä’§ ’¢’°÷Å’°’ø’∂’•÷Ä’® (spaces) ‚Üí strip()
    # ’ì’∏’≠’•’¨ ’¢’∏’¨’∏÷Ä ’ø’°’º’•÷Ä’® ÷É’∏÷Ñ÷Ä’°’ø’°’º ‚Üí lower()
    # Count how many times "n" appears.
    # Replace "easy" with "powerful".
    # Capitalize only the first word.
    # Split into words and find the longest word.
    # Check if the sentence starts with "Python".
    # Join the words back with commas.

sentence = "  Python makes STRING handling Easy and Fun!  "
normalized = sentence.strip().lower()
print(s)
count_n = normalized.count("n")
print(count_n)
replaced = normalized.replace("easy", "powerful")
print(replaced)
capitalized = replaced.capitalize()
print(capitalized)
words = capitalized.split()
longest_word = max(words, key=len)
print(words)
print(longest_word)
print(capitalized.startswith("Python"))
joined = ",".join(words)
print(joined)


# Part D ‚Äì String Formatting Challenges
# 1. Using f-strings, format: "Name: John, Age: 32, Score: 91.23" (rounded to 2 decimals).
name = "John"
age = 32
score = 91.23123
formatted = f'Name: {name}, Age: {age},Score: {score: .2f}'
print(formatted)


# 2. Using .format(), print a table:
    # Item       Price
    # Apple      $0.99
    # Banana     $0.50
    # Cherry     $2.25

print("{:<10} {:>5}".format("Item", "Price"))
print("{:<10} ${:>5}".format("Apple", 0.99))
print("{:<10} ${:>5.2f}".format("Banana", 0.50))
print("{:<10} ${:>5}".format("Cherry", 2.25))

# 3. Using % formatting, print:
    # "Pi is approximately 3.1416" (4 decimals)
pi = 3.14159265
print("Pi is approximately %.4f" % pi)   #Pi is approximately 3.1416


    # "Binary of 12 is 1100"
num = 12
binary_str = bin(num)[2:]
print("Binary of %d is %s" % (num, binary_str))

# %d ‚Üí integer num
# %s ‚Üí string binary_str

# ’∂’∏÷Ç’µ’∂’®
num = 12
print(f"Binary of {num} is {bin(num)[2:]}")



# Applied Coding Tasks
# 1. Word Reversal: Write a function that reverses the order of words in a sentence. "Python is great" ‚Üí "great is Python".
def reverse_words(sentence):
    words = sentence.split()
    reversed_words = words[::-1]
    return " ".join(reversed_words)

print("Python is great->",reverse_words("Python is great"))

# 2. Palindrome Checker: Write is_palindrome(s) that ignores spaces, punctuation, and case.
def is_palondrome(sentence):
    cleaned = "".join(word.lower() for word in sentence if word.isalnum())
    return cleaned == cleaned[::-1]

print("is palidrome ?",is_palondrome("Anna naan"))
# 3. Vowel Counter: Count vowels (a, e, i, o, u) in a given text and return a dictionary.
def count_vowels(text):
    vowels = "aeiou"
    text_lower = text.lower()
    return {v:text_lower.count(v) for v in vowels}

print(count_vowels("Python is great"))

# 4. Anagram Checker: Write are_anagrams(s1, s2) that returns True if two strings are anagrams.
def are_anagrams(s1, s2):

    s1_clean = "".join(c.lower() for c in s1 if c.isalnum())    # "listen"
    s2_clean = "".join(c.lower() for c in s2 if c.isalnum())    # "silent"
    return sorted(s1_clean) == sorted(s2_clean)                 # ['e', 'i', 'l', 'n', 's', 't']

print(are_anagrams("listen", "silent"))  # True
print(are_anagrams("hello", "world"))

# 5. Password Validator: A valid password must:
    # Be at least 8 characters long
    # Contain uppercase, lowercase, digit, and symbol Write validate_password(pw) that returns True/False.

import string

def validate_password(pw):
    if len(pw) < 8:
        return False
    has_upper = any(c.isupper() for c in pw)
    has_lower = any(c.islower() for c in pw)
    has_digit = any(c.isdigit() for c in pw)
    has_symbol = any(c in string.punctuation for c in pw)
    return all([has_upper, has_lower, has_digit, has_symbol])


# print(validate_password("Abc123!@"))  # True
# print(validate_password("password"))   # False

#
# user_pw = input("’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’£’°’≤’ø’∂’°’¢’°’º’®’ù ")
# if validate_password(user_pw):
#     print("‘≥’°’≤’ø’∂’°’¢’°’º’® ’°’∂’æ’ø’°’∂’£ ’ß")
# else:
#     print("‘≥’°’≤’ø’∂’°’¢’°’º’® ’¢’°’æ’°÷Ä’°÷Ä ’∫’°’µ’¥’°’∂’∂’•÷Ä ’π’´ ’∫’°’∞’∫’°’∂’∏÷Ç’¥")
#


# Advanced & Tricky Tasks
# 1. Manual Split: Implement your own version of .split() without using the built-in method.
def manual_split(s, sep=" "):
    result = []
    word = ""
    for char in s:
        if char == sep:
            if word:           # ’•’©’• word ’∏’π ’§’°’ø’°÷Ä’Ø ’ß
                result.append(word)
                word = ""
        else:
            word += char
    if word:                  # ’æ’•÷Ä’ª’∏÷Ç’¥ ’°’æ’•’¨’°÷Å’∂’•’¨ ’æ’•÷Ä’ª’´’∂ ’¢’°’º’®
        result.append(word)
    return result

print(manual_split("Python is great"))  # ['Python', 'is', 'great']


# ’Ø’°’¥ ’∫’°÷Ä’¶’°’∫’•’Ω
s = "Python is great"
result = s.split()
print(result)
# 2. Substring Finder: Implement your own version of .find() that returns the index of a substring.
def manual_find(sentence, word):
    n, m = len(sentence), len(word)
    for i in range(n - m + 1):
        if sentence[i:i+m] == word:
            return i
    return -1

print(manual_find("Hello world", "world"))  # 6
print(manual_find("Hello world", "Python")) # -1
# 3. Frequency Analysis: Given a paragraph, count the frequency of each character (ignoring spaces). Sort results by frequency.
from collections import Counter

def freq_analysis(sentence):
    sentence = sentence.replace(" ", "")
    counter = Counter(sentence)
    return sorted(counter.items(), key=lambda x: x[1], reverse=True)

# counter.items() ‚Üí ’§’°÷Ä’±’∂’∏÷Ç’¥ ’ß list of tuples, ÷Ö÷Ä’´’∂’°’Ø’ù [('H',1), ('e',1), ('l',3), ...]
# key=lambda x: x[1] ‚Üí ’°’Ω’∏÷Ç’¥ ’ß’ù ’Ω’∏÷Ä’ø’°’æ’∏÷Ä’´ ’®’Ω’ø value (’°’µ’Ω’´’∂÷Ñ’∂ ’®’Ω’ø ’∞’°’≥’°’≠’°’Ø’°’∂’∏÷Ç’©’µ’°’∂)÷â
# reverse=True ‚Üí ’∂’æ’°’¶’¥’°’∂ ’Ø’°÷Ä’£’∏’æ (’°’¥’•’∂’°’∞’°’≥’°’≠ ’∞’°’∂’§’´’∫’∏’≤’® ’°’º’°’ª’´’∂’® ’¨’´’∂’´)÷â

text = "Hello world"
print(freq_analysis(text))
# [('l', 3), ('o', 2), ('H', 1), ('e', 1), ('w', 1), ('r', 1), ('d', 1)]

# 4. Caesar Cipher: Implement encryption/decryption with shift=3. Example: "abc" ‚Üí "def".

# chem nayel

# 5. Word Censor: Replace all words from a given ‚Äúbanned list‚Äù with "***".

#chem nayel

# Mini Projects
# 1. Text Statistics Tool: Input a paragraph and compute:

    # Number of characters (with and without spaces)
    # Number of words
    # Average word length
    # Number of sentences

def text_stats(paragraph):
    chars_with_spaces = len(paragraph)
    chars_without_spaces = len(paragraph.replace(" ", ""))
    words = paragraph.split()
    num_words = len(words)
    avg_word_len = sum(len(w) for w in words) / num_words if num_words > 0 else 0
    num_sentences = paragraph.count('.') + paragraph.count('!') + paragraph.count('?')

    return {
        "’è’°’º’•÷Ä’´ ÷Ñ’°’∂’°’Ø (’¢’°÷Å’°’ø’∂’•÷Ä’∏’æ)": chars_with_spaces,
        "’è’°’º’•÷Ä’´ ÷Ñ’°’∂’°’Ø (’°’º’°’∂÷Å ’¢’°÷Å’°’ø)": chars_without_spaces,
        "‘≤’°’º’•÷Ä’´ ÷Ñ’°’∂’°’Ø": num_words,
        "’Ñ’´’ª’´’∂ ’¢’°’º’´ ’•÷Ä’Ø’°÷Ä’∏÷Ç’©’µ’∏÷Ç’∂": round(avg_word_len, 2),
        "’Ü’°’≠’°’§’°’Ω’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø": num_sentences
    }


text = "Python is great! It makes string handling easy. Do you agree?"
print(text_stats(text))



# 2. Email Extractor: From a given text, extract all valid email addresses using only string methods (no regex).

def extract_emails(text):
    words = text.split()
    emails = []
    for w in words:
        if "@" in w and "." in w:
            # ’¥’°÷Ñ÷Ä’•’∂÷Ñ ’∞’∂’°÷Ä’°’æ’∏÷Ä ’Ø’•’ø’°’§÷Ä’°’Ø’°’∂ ’∂’∑’°’∂’∂’•÷Ä’® ’Ω’Ø’¶’¢’´÷Å ÷á ’æ’•÷Ä’ª’´÷Å
            email = w.strip(",;:!?")
            emails.append(email)
    return emails

txt = "Contact us at support@vxsoft.com or anna.galstyan@vxsoft.com. Thank you!"
print(extract_emails(txt))
 # ’Ø’°’¥
def extract_emails(text):
    return [w.strip(",;:!?") for w in text.split() if "@" in w and "." in w]

txt = "Contact us at support@vxsoft.com or anna.galstyan@vxsoft.com. Thank you!"
print(extract_emails(txt))



# 3. Simple Template Engine: Replace placeholders in a template:
#   template = "Hello {name}, your balance is {balance} USD."
#   with values from a dictionary.

def render_template(template, values):
    result = template
    for key, val in values.items():
        placeholder = "{" + key + "}"
        result = result.replace(placeholder, str(val))
    return result



template = "Hello {name}, your balance is {balance} USD."
values = {"name": "Anna", "balance": 1250.75}
print(render_template(template, values))
# Hello Anna, your balance is 1250.75 USD.
# ’Ø’°’¥ ’∫’°÷Ä’¶’°’∫’•’Ω
template = "Hello {name}, your balance is {balance} USD."
print(template.format(name="Anna", balance=1250.75))


# Reflection Questions
# 1. Why did Python designers choose to make strings immutable?

# ‘ª’∂’π’∏’û÷Ç Python‚Äì’´ ’Ω’ø’•’≤’Æ’∏’≤’∂’•÷Ä’® ’®’∂’ø÷Ä’•÷Å’´’∂ strings‚Äì’® ’°’∂÷É’∏÷É’∏’≠ (immutable) ’§’°÷Ä’±’∂’•’¨÷â
# ‘±’∂’æ’ø’°’∂’£’∏÷Ç’©’µ’∏÷Ç’∂ ‚Üí ‘µ’©’• ’¥’´ ’°’∂’£’°’¥ string‚Äì’® ’Ω’ø’•’≤’Æ’æ’•’¨ ’ß, ’°’µ’∂ ’π’´ ’Ø’°÷Ä’∏’≤ ’∫’°’ø’°’∞’°’¢’°÷Ä ÷É’∏÷É’∏’≠’æ’•’¨÷â
# ‘±÷Ä’°’£’∏÷Ç’©’µ’∏÷Ç’∂ (performance) ‚Üí ‘±’∂÷É’∏÷É’∏’≠ ÷Ö’¢’µ’•’Ø’ø’∂’•÷Ä’® ’Ø’°÷Ä’∏’≤ ’•’∂ ’∫’°’∞’æ’•’¨ ’∞’´’∑’∏’≤’∏÷Ç’©’µ’°’∂ ’¥’•’ª "interning"-’´ ’¥’´’ª’∏÷Å’∏’æ (Python‚Äì’® ’∂’∏÷Ç’µ’∂ string‚Äì’® ’Ø÷Ä’Ø’∂’°’Ø’´ ’π’´ ’∫’°’∞’∏÷Ç’¥)÷â
# Hashability ‚Üí ’î’°’∂’´ ’∏÷Ä string‚Äì’•÷Ä’® ’π’•’∂ ÷É’∏’≠’æ’∏÷Ç’¥, ’Ø’°÷Ä’•’¨’´ ’ß ’§÷Ä’°’∂÷Ñ ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨ dictionary‚Äì’∂’•÷Ä’´ keys‚Äì’∏÷Ç’¥ ’∏÷Ç set‚Äì’•÷Ä’∏÷Ç’¥÷â


# 2. Which string method(s) do you find most powerful for real-world text processing? Why?
# ’à÷Ä string method‚Äì’∂’•÷Ä’∂ ’•’Ω ’°’¥’•’∂’°’∞’¶’∏÷Ä’∂ ’∞’°’¥’°÷Ä’∏÷Ç’¥ ’´÷Ä’°’Ø’°’∂ ’Ø’µ’°’∂÷Ñ’∏÷Ç’¥÷â
# split() ÷á join() ‚Üí ’ø’•÷Ñ’Ω’ø’® ’¢’°’™’°’∂’•’¨’∏÷Ç ’∏÷Ç ’∂’∏÷Ä’´÷Å ’∞’°’æ’°÷Ñ’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â
# replace() ‚Üí ’¢’°’º’•÷Ä ’Ø’°’¥ ’∂’´’∑’•÷Ä ÷É’∏’≠’°÷Ä’´’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â
# strip() ‚Üí ’∏’π ’∫’•’ø÷Ñ’°’Ø’°’∂ ’π’°’Ø’•÷Ä’ø’∂’•÷Ä ’∏÷Ç space‚Äì’•÷Ä ’¥’°÷Ñ÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â
# lower() / upper() - ’∏÷Ä’∏’∂’¥’°’∂ ’∞’°’¥’°÷Ä÷â
# ’ï÷Ä’´’∂’°’Ø, email‚Äì’∂’•÷Ä, ’°’∂’∏÷Ç’∂’∂’•÷Ä ’∏÷Ä’∏’∂’•’¨’´’Ω ’Ω÷Ä’°’∂÷Ñ ’•’∂ ’°’¥’•’∂’°’∑’°’ø ÷Ö’£’ø’°’£’∏÷Ä’Æ’æ’∏’≤’∂’•÷Ä’®÷â

# 3. How would you explain the difference between raw strings and normal strings to a beginner?

# Normal string ‚Üí Python‚Äì’® escape sequence‚Äì’∂’•÷Ä’® (\n, \t, \u) ’¥’•’Ø’∂’°’¢’°’∂’∏÷Ç’¥ ’ß÷â
# Raw string (r"...") ‚Üí Python‚Äì’® ’∏’π’´’∂’π ’π’´ ’¥’•’Ø’∂’°’¢’°’∂’∏÷Ç’¥, ’°’¥’•’∂ ’´’∂’π ’∫’°’∞’∏÷Ç’¥ ’ß ’´’∂’π’∫’•’Ω ’Ø’°÷â
# ’ï÷Ä’´’∂’°’Ø’ù
# print("C:\\new_folder\\test.txt")   # ’∫’•’ø÷Ñ ’ß ’Ø÷Ä’Ø’∂’°’Ø’´ \\ ’£÷Ä’•’∂÷Ñ
# print(r"C:\new_folder\test.txt")    # raw string-’∏’æ escape ’∫’•’ø÷Ñ ’π’ß

# ‘¥÷Ä’° ’∞’°’¥’°÷Ä raw string‚Äì’•÷Ä’® ’∑’°’ø ’•’∂ ÷Ö’£’ø’°’£’∏÷Ä’Æ’æ’∏÷Ç’¥ regex‚Äì’•÷Ä’∏÷Ç’¥÷â

# 4. When formatting strings, which method would you choose in modern code, and why?

# %  formatting ‚Üí ’∞’∂’°÷Å’°’Æ ’ß, ’¢’°’µ÷Å ’§’•’º ’∞’°’∂’§’´’∫’∏÷Ç’¥ ’ß÷â
# .format() ‚Üí ’°’æ’•’¨’´ ’≥’Ø’∏÷Ç’∂, ’¨’°’æ ’ø’°÷Ä’¢’•÷Ä’°’Ø ’ß÷â
# f-strings (Python 3.6+) ‚Üí ’°’¥’•’∂’°’°÷Ä’§’´ ’∏÷Ç ’®’∂’©’•’º’∂’•’¨’´ ’ø’°÷Ä’¢’•÷Ä’°’Ø’®÷â
# ‘±’µ’Ω÷Ö÷Ä f-strings‚Äì’∂ ’ß ’∞’°’¥’°÷Ä’æ’∏÷Ç’¥ "Pythonic", ’∏÷Ä’∏’æ’∞’•’ø÷á ’°’æ’•’¨’´ ’Ø’°÷Ä’≥ ’∏÷Ç ’∞’°’Ω’Ø’°’∂’°’¨’´ ’ß÷â

# 5. How does understanding Unicode affect global software development?
# 1. ‘≤’∏’¨’∏÷Ä ’¨’•’¶’∏÷Ç’∂’•÷Ä’´ ’°’ª’°’Ø÷Å’∏÷Ç’©’µ’∏÷Ç’∂
# ASCII‚Äì’∂ ’∏÷Ç’∂’´ ’¥’´’°’µ’∂ ’°’∂’£’¨’•÷Ä’•’∂ ’ø’°’º’•÷Ä, ’©’æ’•÷Ä ÷á ’∏÷Ä’∏’∑ ’∂’∑’°’∂’∂’•÷Ä (’®’∂’§’°’¥’•’∂’® 128 ’Ω’´’¥’æ’∏’¨)÷â
# Unicode‚Äì’® ’∂’•÷Ä’°’º’∏÷Ç’¥ ’ß ’°’æ’•’¨’´ ÷Ñ’°’∂ 150 ’£÷Ä’°’µ’´’∂ ’∞’°’¥’°’Ø’°÷Ä’£, 140,000+ ’Ω’´’¥’æ’∏’¨‚Ä§ ’∞’°’µ’•÷Ä’•’∂ (‘±, ‘≤, ‘≥‚Ä¶), ’π’´’∂’°÷Ä’•’∂, ’°÷Ä’°’¢’•÷Ä’•’∂, ’ß’¥’∏’ª’´ üòä ÷á ’°’µ’¨’∂÷â
# ‘µ’©’• ’Æ÷Ä’°’£’´÷Ä’® ’°’∑’≠’°’ø’∏÷Ç’¥ ’ß ’¥’´’°’µ’∂ ASCII‚Äì’∏’æ, ’°’µ’∂ ’π’´ ’Ø’°÷Ä’∏’≤ ’®’∂’§’∏÷Ç’∂’•’¨ ’°’∂’∏÷Ç’∂’∂’•÷Ä, ÷Ö÷Ä’´’∂’°’Ø’ù ‘±’∂’∂’°, Âº†‰ºü ’Ø’°’¥ ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨ ’ß’¥’∏’ª’´÷â

# 2. ’Ñ’´’°’ø’•’Ω’°’Ø’∏÷Ç’©’µ’∏÷Ç’∂ ’¢’∏’¨’∏÷Ä ’∞’°÷Ä’©’°’Ø’∂’•÷Ä’∏÷Ç’¥
# ‘±’º’°’∂÷Å Unicode‚Äì’´, ’∂’∏÷Ç’µ’∂ ’¢’°’º’® ’Ø’°÷Ä’∏’≤ ’ß ’Ω’≠’°’¨ ’•÷Ä÷á’°’¨ Windows‚Äì’∏÷Ç’¥, Linux‚Äì’∏÷Ç’¥ ’Ø’°’¥ ’¢÷Ä’°’∏÷Ç’¶’•÷Ä’∏÷Ç’¥÷â
# Unicode‚Äì’® ’°’∫’°’∞’∏’æ’∏÷Ç’¥ ’ß, ’∏÷Ä "√©" ’Ø’°’¥ "‘±" ’¢’∏’¨’∏÷Ä ’ø’•’≤’•÷Ä’∏÷Ç’¥ ’∂’∏÷Ç’µ’∂ ’Ø’∏’§’∏’æ ’∂’•÷Ä’Ø’°’µ’°÷Å’æ’•’∂÷â

# 3. ’è’æ’µ’°’¨’∂’•÷Ä’´ ÷É’π’°÷Å’∏÷Ç’¥’´÷Å ’≠’∏÷Ç’Ω’°÷É’∏÷Ç’¥ (mojibake)
# ‘µ÷Ä’¢ ’ø’•’Ω’∂’∏÷Ç’¥ ’•’Ω ’°’∂’´’¥’°’Ω’ø ’∂’∑’°’∂’∂’•÷Ä, ÷Ö÷Ä’´’∂’°’Ø’ù √É¬© ÷É’∏’≠’°÷Ä’•’∂ √©, ’§’° encoding-’´ ’Ω’≠’°’¨’´ ’∞’•’ø÷á’°’∂÷Ñ ’ß÷â
# Unicode (’∞’°’ø’Ø’°’∫’•’Ω UTF-8) ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨’® ’©’∏÷Ç’µ’¨ ’ß ’ø’°’¨’´’Ω ’≠’∏÷Ç’Ω’°÷É’•’¨ ’°’µ’§ ’Ω’≠’°’¨’∂’•÷Ä’´÷Å÷â
#
# 4. ‘∑’¥’∏’ª’´’∂’•÷Ä, ’∂’∑’°’∂’∂’•÷Ä ÷á ’™’°’¥’°’∂’°’Ø’°’Ø’´÷Å ’∞’°’≤’∏÷Ä’§’°’Ø÷Å’∏÷Ç’©’µ’∏÷Ç’∂
# Unicode‚Äì’® ’¥’´’°’µ’∂ ’ø’°’º’•÷Ä’´ ’∞’°’¥’°÷Ä ’π’ß‚Ä§ ’°’µ’∂ ’∂’•÷Ä’°’º’∏÷Ç’¥ ’ß ‚ù§Ô∏è, üî•, ü§ñ, ’ø’°÷Ä’¢’•÷Ä ’°÷Ä’™’∏÷Ç’µ’©’∂’•÷Ä (‚Ç¨, ¬•, ‚Çø), ’¥’°’©’•’¥’°’ø’´’Ø’°’Ø’°’∂ ’∂’∑’°’∂’∂’•÷Ä (‚àë, ‚àö)÷â
# ‘±’µ’Ω÷Ö÷Ä ’°’º’°’∂÷Å Unicode ’Æ÷Ä’°’£÷Ä’•÷Ä ’£÷Ä’•’©’• ’°’∂’∞’∂’°÷Ä ’ß ’∫’°’ø’Ø’•÷Ä’°÷Å’∂’•’¨÷â
#
# 5. ’Ñ’´’ª’°’¶’£’°’µ’´’∂ ’∑’∏÷Ç’Ø’°’µ’´ ’∞’°’¥’°÷Ä ’Æ÷Ä’°’£÷Ä’•÷Ä
# ‘µ’©’• ’Æ÷Ä’°’£’´÷Ä’® ’∂’°’≠’°’ø’•’Ω’æ’°’Æ ’ß ’¥’´’°’µ’∂ ’°’∂’£’¨’•÷Ä’•’∂’´ ’∞’°’¥’°÷Ä, ’°’µ’∂ ’Ω’°’∞’¥’°’∂’°÷É’°’Ø’∏÷Ç’¥ ’ß ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä’´’∂÷â
# Unicode‚Äì’® ’©’∏÷Ç’µ’¨ ’ß ’ø’°’¨’´’Ω, ’∏÷Ä ’¥’•’Ø ÷á ’∂’∏÷Ç’µ’∂ ’Æ÷Ä’°’£’´÷Ä’® ÷Ö’£’ø’°’£’∏÷Ä’Æ’æ’´ ’ø’°÷Ä’¢’•÷Ä ’•÷Ä’Ø÷Ä’∂’•÷Ä’∏÷Ç’¥’ù ’°’º’°’∂÷Å ’¨÷Ä’°÷Å’∏÷Ç÷Å’´’π ÷É’∏÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´÷â
# ‘µ’¶÷Ä’°’Ø’°÷Å’∏÷Ç’©’µ’∏÷Ç’∂
# Unicode‚Äì’® ’∞’°’Ω’Ø’°’∂’°’¨’® ’∂’∑’°’∂’°’Ø’∏÷Ç’¥ ’ß ’£÷Ä’•’¨ ’Æ÷Ä’°’£÷Ä’•÷Ä, ’∏÷Ä’∏’∂÷Ñ ’°’∫’°’∞’∏’æ ’•’∂, ’∞’°’Ω’Ø’°’∂’°’¨’´ ÷á ’∞’°÷Ä’¥’°÷Ä’°’æ’•’ø ’°’¥’•’∂ ’¨’•’¶’æ’´ ÷á ’¥’∑’°’Ø’∏÷Ç’µ’©’´ ’∞’°’¥’°÷Ä÷â


# Lists Chapter
# ## Theory & Conceptual Questions
# 1. What is a list in Python? How is it different from a single string?
#List ‚Üí ’ø’°÷Ä÷Ä’•÷Ä’´ ’∞’°’æ’°÷Ñ’°’Æ’∏÷Ç ’ß (’Ø’°÷Ä’∏’≤ ’•’∂ ’¨’´’∂’•’¨ ’©’æ’•÷Ä, ’ø’•÷Ñ’Ω’ø’•÷Ä, ’°’µ’¨ list-’•÷Ä ÷á ’°’µ’¨’∂)÷â
# String ‚Üí ’∫’°÷Ä’¶’°’∫’•’Ω ’ø’•÷Ñ’Ω’ø’´ ’∞’°’ª’∏÷Ä’§’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ ’ß (’¥’´’°’µ’∂ ’Ω’´’¥’æ’∏’¨’∂’•÷Ä’´ list-’´ ’∂’¥’°’∂, ’¢’°’µ÷Å immutable)÷â

my_list = [1, 2, 3, "Python"]  # list
my_string = "Python"           # string

print(type(my_list))
print(type(my_string))

# 2. How do you find the number of elements in a list?
numbers = [10, 20, 30, 40]
print(len(numbers))  # 4

# 3. Explain the difference between a list's index and the element at that index.
fruits = ["apple", "banana", "cherry"]
print(1)          # index ’©’´’æ’∂ ’ß
print(fruits[1])  # "banana" ‚Üí index=1-’∏÷Ç’¥ ’£’ø’∂’æ’∏’≤ ’ø’°÷Ä÷Ä

# 4. Why are lists called mutable? Give a code example showing how to change a list.
# Mutable ’∂’∑’°’∂’°’Ø’∏÷Ç’¥ ’ß, ’∏÷Ä ’Ø’°÷Ä’∏’≤ ’•’Ω ÷É’∏’≠’•’¨ list-’´ ’ø’°÷Ä÷Ä’•÷Ä’® ’ø’•’≤’∏÷Ç’¥÷â

nums = [1, 2, 3]
nums[1] = 99
print(nums)  # [1, 99, 3]

# String-’∏÷Ç’¥ ’∂’∏÷Ç’µ’∂’® ’°’∂’•’¨’® Error ’Ø’ø’°, ’∏÷Ä’∏’æ’∞’•’ø÷á string immutable ’ß÷â

# 5. What happens when you try to get an item from an index that doesn't exist?
# IndexError ’Ø’Ω’ø’°’∂’°’∂÷Ñ÷â

letters = ["a", "b", "c"]
# print(letters[5])   # IndexError: list index out of range

# 6. Explain with a simple code example the difference between copying a list using list_a = list_b versus list_a = list_b[:].

# list_a = list_b ‚Üí ‘µ÷Ä’Ø’∏÷Ç’Ω’∂ ’ß’¨ ’∂’∏÷Ç’µ’∂ ÷Ö’¢’µ’•’Ø’ø’´’∂ ’•’∂ ’¥’°’ø’∂’°’∂’∑’∏÷Ç’¥, ’∂’∏÷Ç’µ’∂ ’∞’°’Ω÷Å’•’∂ (’¥’•’Ø’∏÷Ç’¥ ÷É’∏÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂’® ’Ø’°’∂’§÷Ä’°’§’°’º’∂’° ’¥’µ’∏÷Ç’Ω’´’∂)÷â
# list_a = list_b[:] ‚Üí ’ç’ø’•’≤’Æ’æ’∏÷Ç’¥ ’ß ’∂’∏÷Ä copy, ÷á ÷É’∏÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ’π’•’∂ ’°’¶’§’∏÷Ç’¥÷â

list_b = [1, 2, 3]

list_a = list_b        # ’∂’∏÷Ç’µ’∂ ’∞’≤’∏÷Ç’¥’∂ ’ß
list_a[0] = 99
print(list_b)          # [99, 2, 3]  ‚Üí list_b-’∂ ’ß’¨ ÷É’∏’≠’æ’•÷Å

list_c = list_b[:]     # copy
list_c[0] = 500
print(list_b)          # [99, 2, 3]  ‚Üí ’π’´ ÷É’∏’≠’æ’•’¨
print(list_c)          # [500, 2, 3]


# Fundamental Coding Exercises
# Create a list called student_ages with the ages of five imaginary friends.
student_ages = [15, 17, 18, 16, 19]
print("‘∏’∂’Ø’•÷Ä’∂’•÷Ä’´ ’ø’°÷Ä’´÷Ñ’∂’•÷Ä’®:", student_ages)
# Print the age of the fourth friend in your list.
print("’â’∏÷Ä÷Ä’∏÷Ä’§ ’®’∂’Ø’•÷Ä’∏’ª ’ø’°÷Ä’´÷Ñ:",student_ages[3])
# Given the list greetings = ['Hello', 'Hi', 'Hey', 'Yo'], extract and print the first and last elements using a single piece of code.
greetings = ['Hello', 'Hi', 'Hey', 'Yo']
print(greetings)
print("‘±’º’°’ª’´’∂ ÷á ’æ’•÷Ä’ª’´’∂ ’∏’≤’ª’∏÷Ç’µ’∂’®:",greetings[0],greetings[-1])
# Combine part1 = ['Python', 'is'] and part2 = ['awesome', '!'] into a new list called sentence_parts.
part1 = ['Python', 'is']
part2 = ['awesome', '!']
sentence_parts = part1 + part2
print(" ’Ñ’´’°÷Å’æ’°’Æ ÷Å’∏÷Ç÷Å’°’Ø:",sentence_parts)

# Using the student_ages list from exercise 1, change the age of the third friend to a new value.
student_ages[2] = 20
print("’ì’∏÷É’∏’≠’æ’°’Æ ’ø’°÷Ä’´÷Ñ’∂’•÷Ä’´ ÷Å’∏÷Ç÷Å’°’Ø:",student_ages)
# Create a list that contains a string, an integer, a float, and another list.
mixed_list = ["Anna", 25, 3.14, [1, 2, 3]]
print("’è’°÷Ä’¢’•÷Ä ’ø’´’∫’´ ’°÷Ä’™’•÷Ñ’∂’•÷Ä’∏’æ ÷Å’∏÷Ç÷Å’°’Ø:", mixed_list)

# Practical Exercises with Methods
# Given:
# zoo_animals = ['lion', 'tiger', 'lion', 'elephant', 'giraffe']
# Find and print the total number of animals in the zoo_animals list.
# Use a list method to count how many times 'lion' appears in the list.
# Remove the first instance of 'lion' from the list.
# Find and print the index of 'elephant'.
# Sort the zoo_animals list alphabetically.
# Append a new animal, 'zebra', to the end of the list.
# Create a new list by making a copy of zoo_animals and clear all items from the original zoo_animals list.


zoo_animals = ['lion', 'tiger', 'lion', 'elephant', 'giraffe']
print("‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’Ø’•’∂’§’°’∂’´’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø’®:", len(zoo_animals))
zoo_animals.remove('lion')
print("‘±’º’°’ª’´’∂ 'lion'-’® ’∞’•’º’°÷Å÷Ä’´’∂÷Ñ:", zoo_animals)
print("elephant'-’´ ’´’∂’§’•÷Ñ’Ω’®:", zoo_animals.index('elephant'))
zoo_animals.sort()
print("’è’•’Ω’°’Ø’°’æ’∏÷Ä’æ’°’Æ ÷Å’∏÷Ç÷Å’°’Ø:", zoo_animals)
zoo_animals.append('zebra')
print("6) ‘±’æ’•’¨’°÷Å’æ’•÷Å 'zebra':", zoo_animals)
zoo_copy = zoo_animals.copy()
zoo_animals.clear()
print("7) ‘ø÷Ä’Ø’∂÷Ö÷Ä’´’∂’°’Ø ÷Å’∏÷Ç÷Å’°’Ø:", zoo_copy)
print("   ‘≤’∂÷Ö÷Ä’´’∂’°’Ø’® ’¥’°÷Ñ÷Ä’æ’°’Æ ’ß:", zoo_animals)

#  Interesting Challenges
# 1. Manual Min/Max Finder: Given the list numbers = [25, 12], write code to figure out which number is larger and print it. You can't use if statements. (Hint: Use a temporary variable and comparison operators).
numbers = [25, 12]

a = numbers[0]
b = numbers[1]

maxs = (a > b) * a + (b > a) * b
mins = (a < b) * a + (b < a) * b
print("’Ñ’•’Æ ’©’´’æ’∂ ’ß:", maxs)
print("’ì’∏÷Ñ÷Ä ’©’´’æ’∂ ’ß:", mins)
# 2. "Reverse" a List: Given a list data = [1, 2, 3], create a new list that contains the elements in reverse order without using any loops or special reverse methods.

data = [1, 2, 3]
reversed_data = data[::-1]
print("Reverse:", reversed_data)

# 3. List Swapper: Given a list values = ['A', 'B', 'C'], swap the first and last elements so the list becomes ['C', 'B', 'A']. You must use a temporary variable to hold one of the values.
values = ['A', 'B', 'C']
#['C', 'B', 'A']
x=values[0]
values[0]=values[-1]
values[-1]=x
print(values)

# 4. Find a Duplicate: Given items = ['a', 'b', 'c', 'b'], write a sequence of steps to find and print the first duplicate item.
items = ['a', 'b', 'c', 'b']
seen = set()

for item in items:
    if item in seen:
        print("‘±’º’°’ª’´’∂ ’Ø÷Ä’Ø’∂’æ’∏’≤’®:", item)
        break
    seen.add(item)

# 5. Sublist from Slices: Given a list my_list = ['A', 'B', 'C', 'D', 'E'], create a new list that contains only the middle three elements.
my_list = ['A', 'B', 'C', 'D', 'E']
middle_three = my_list[1:4]
print("Middle three:", middle_three)


# 6. Create a Simple Song: Create a list with three lines of a song. Then, use string and list methods to add a new line to the middle and print the full song with each line on a new line.
song = ["Line 1: Twinkle twinkle little star",
        "Line 2: How I wonder what you are",
        "Line 3: Up above the world so high"]


song.insert(1, "Line 1.5: Like a diamond in the sky")

for line in song:
    print(line)

# Dictionaries Chapter
# ## Theory & Conceptual Questions
# 1. What is a dictionary in Python? How is it different from a list?

# Dictionary-’® Python-’∏÷Ç’¥ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’Ø’°’º’∏÷Ç÷Å’æ’°’Æ÷Ñ ’ß, ’∏÷Ä’® ’∫’°’∞’∏÷Ç’¥ ’ß key-value ’¶’∏÷Ç’µ’£’•÷Ä÷â
# List-’® ’∫’°’∞’∏÷Ç’¥ ’ß ’¥’´’°’µ’∂ ’Ø’°÷Ä’£’°’æ’∏÷Ä’æ’°’Æ ’ß’¨’•’¥’•’∂’ø’∂’•÷Ä’´ ’∞’°’æ’°÷Ñ’°’Æ’∏÷Ç, ’∏÷Ä’∏’∂÷Å ’ø’•’≤’® ’∏÷Ä’∏’∑’æ’∏÷Ç’¥ ’ß ’´’∂’§’•÷Ñ’Ω’∏’æ÷â
# Dictionary-’∏÷Ç’¥ ’ß’¨’•’¥’•’∂’ø’∂’•÷Ä’® ’Ø’°÷Ä’£’°’æ’∏÷Ä’æ’°’Æ ’π’•’∂ ’®’Ω’ø ’´’∂’§’•÷Ñ’Ω’´, ’°’µ’¨ ’®’Ω’ø ’¢’°’∂’°’¨’´’∂’•÷Ä’´ (key)÷â

# 2. Explain the concept of a key-value pair. What does a key do?
# Dictionary-’∏÷Ç’¥ ’µ’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’°÷Ä’™’•÷Ñ (value) ’Ø’°’∫’æ’°’Æ ’ß ’¢’°’∂’°’¨’´’´ (key) ’∞’•’ø÷â
# Key-’® ’∞’°’∂’§’•’Ω ’ß ’£’°’¨’´’Ω ’∏÷Ä’∫’•’Ω ’∂’∏÷Ç’µ’∂’°’Ø’°’∂’°÷Å’∏÷Ç÷Å’´’π, ’∏÷Ä’´ ’¥’´’ª’∏÷Å’∏’æ ’¥’•’∂÷Ñ ’£’ø’∂’∏÷Ç’¥ ’Ø’°’¥ ÷É’∏÷É’∏’≠’∏÷Ç’¥ ’•’∂÷Ñ ’°÷Ä’™’•÷Ñ’®÷â

student = {"name": "Anna", "age": 24}
# "name" -> key
# "Anna" -> value

# 3. What are some rules for creating a key in a dictionary?

# Key-’® ’∫’•’ø÷Ñ ’ß ’¨’´’∂’´ hashable ÷Ö’¢’µ’•’Ø’ø (’°’µ’Ω’´’∂÷Ñ’∂’ù ’°’µ’∂ ’∫’•’ø÷Ñ ’ß ’∏÷Ç’∂’•’∂’° ’∞’°’Ω’ø’°’ø’∏÷Ç’∂ ’°÷Ä’™’•÷Ñ ÷á ’¨’´’∂’´ ’°’∂÷É’∏÷É’∏’≠)÷â
# ’ç’∏’æ’∏÷Ä’°’¢’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’æ’∏÷Ç’¥ ’•’∂’ù string, number, tuple (’•’©’• tuple-’® ’¥’´’°’µ’∂ hashable ÷Ö’¢’µ’•’Ø’ø’∂’•÷Ä ’∏÷Ç’∂’´)÷â
# Key ’π’´ ’Ø’°÷Ä’∏’≤ ’¨’´’∂’•’¨’ù list, dictionary ’Ø’°’¥ set, ÷Ñ’°’∂’´ ’∏÷Ä ’§÷Ä’°’∂÷Ñ mutable ’•’∂÷â

# 4. Can a dictionary have duplicate keys? What about duplicate values? Explain.
# ‘ø÷Ä’Ø’∂’æ’∏’≤ ’¢’°’∂’°’¨’´ (key) ’π’´ ’Ø’°÷Ä’∏’≤ ’¨’´’∂’•’¨÷â ‘µ’©’• ÷É’∏÷Ä’±’•’∂÷Ñ, ’æ’•÷Ä’ª’´’∂’® ’Ø÷É’∏’≠’°÷Ä’´’∂’´ ’∂’°’≠’∏÷Ä’§’´’∂÷â

d = {"a": 1, "a": 2}
print(d)  # {'a': 2}


# ‘ø÷Ä’Ø’∂’æ’∏’≤ ’°÷Ä’™’•÷Ñ’∂’•÷Ä (value) ’Ø’°÷Ä’∏’≤ ’•’∂ ’¨’´’∂’•’¨÷â

d = {"x": 1, "y": 1}
print(d)  # {'x': 1, 'y': 1}

# 5. Why is a dictionary considered mutable?
# ’î’°’∂’´ ’∏÷Ä ’¥’•’∂÷Ñ ’Ø’°÷Ä’∏’≤ ’•’∂÷Ñ dictionary-’´ ’°÷Ä’™’•÷Ñ’∂’•÷Ä’® ÷É’∏’≠’•’¨, ’°’æ’•’¨’°÷Å’∂’•’¨ ’∂’∏÷Ä key-value ’¶’∏÷Ç’µ’£’•÷Ä ’Ø’°’¥ ’ª’∂’ª’•’¨ ’¶’∏÷Ç’µ’£’•÷Ä’ù ’°’º’°’∂÷Å dictionary-’∂ ’∂’∏÷Ä’´÷Å ’Ω’ø’•’≤’Æ’•’¨’∏÷Ç÷â

student = {"name": "Anna", "age": 24}
print(student)
student["age"] = 25   # ’°÷Ä’™’•÷Ñ’´ ÷É’∏÷É’∏’≠’∏÷Ç’¥
student["grade"] = "A"  # ’∂’∏÷Ä key-value ’¶’∏÷Ç’µ’£’´ ’°’æ’•’¨’°÷Å’∏÷Ç’¥
print(student)


# Fundamental Coding Exercises
# 1. Create a dictionary called employee_data with keys for 'name', 'employee_id', and 'department'.
employee_data = {
    "name": "‘±’∂’∂’°",
    "employee_id": 101,
    "department": "IT"
}
# 2. Access and print the employee's department from the dictionary.
print(employee_data["department"])
# 3. Given inventory = {'notebooks': 50, 'pens': 100}, update the number of notebooks to 45.
inventory = {'notebooks': 50, 'pens': 100}
inventory["notebooks"] = 45
print(inventory)
# 4. Add a new key-value pair to the inventory dictionary: 'erasers': 75.
inventory["notebooks"] = 45
print(inventory)
# 5. Create a new dictionary by combining fruits = {'apple': 1, 'banana': 2} and citrus = {'lemon': 3}.
fruits = {"apple": 1, "banana": 2}
citrus = {"lemon": 3}

fruits.update(citrus)
print(fruits)
# 6. Create a dictionary where the values are lists. For example, a student dictionary where the key is 'courses' and the value is a list of courses.

student = {
    "name": "‘±’∂’´",
    "courses": ["Python", "Math", "English"]
}
print(student)


# Practical Exercises with Methods
# Given:
# user_profile = {'username': 'coder123', 'email': 'coder@example.com', 'is_active': True}
user_profile = {
    'username': 'coder123',
    'email': 'coder@example.com',
    'is_active': True
}
# 1. Use a method to get the value for 'email' without causing an error if the key doesn't exist.
email = user_profile.get('email')
print("Email:", email)

# 2. Check if the key 'is_active' exists in the user_profile and print True or False.
print('is_active' in user_profile)
# 3. Print a list of all the keys from the user_profile.
print("‘≤’∏’¨’∏÷Ä ’¢’°’∂’°’¨’´’∂’•÷Ä’®:", list(user_profile.keys()))
# 4. Print a list of all the values from the user_profile.
print("‘≤’∏’¨’∏÷Ä ’°÷Ä’™’•÷Ñ’∂’•÷Ä’®:", list(user_profile.values()))
# 5. Remove the 'is_active' key-value pair.
user_profile.pop('is_active')
print(user_profile)
# 6. Use a method to get the value for 'username' and remove it from the dictionary in a single step.
username = user_profile.pop('username')
print("Username:", username)
print("’Ü’∏÷Ä dictionary:", user_profile)

# Interesting Challenges
# 1. Simple Word Counter: Given a string "hello world", and a dictionary called counts = {}, add key-value pairs to the dictionary to count the number of times each word appears.
text = "hello world world ooo"
counts = {}

words = text.split()
print(words)
for word in words:
    counts[word] = counts.get(word, 0) + 1

print(counts)

# 2. Contact Book: Given an empty dictionary contacts, add two contacts to it. Each contact should be a key with a name and a value with a phone number. Then, update one of the phone numbers.
contacts = {}
contacts["Anna"] = "1234567"
contacts["Bob"] = "9876543"

contacts["Bob"] = "5556789"
print(contacts)
# {'Anna': '123-4567', 'Bob': '555-6789'}

# 3. Total Price: Given a shopping list dictionary like prices = {'apple': 0.5, 'banana': 0.25} and a quantities dictionary quantities = {'apple': 3, 'banana': 5}, calculate the total cost for each item and then the grand total.
prices = {'apple': 0.5, 'banana': 0.25}
quantities = {'apple': 3, 'banana': 5}

total_cost = {}
grand_total = 0

for item in prices:
    cost = prices[item] * quantities.get(item, 0)
    total_cost[item] = cost
    grand_total += cost

print("’Ñ’•’Ø’´ ’°÷Ä’™’•÷Ñ’®:", total_cost)
print("‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’∏÷Ç’¥’°÷Ä’®:", grand_total)


# 4. Dictionary Swapper: Given a dictionary data = {'a': 1, 'b': 2}, create a new dictionary where the keys and values are swapped.
data = {'a': 1, 'b': 2}
swapped = {v: k for k, v in data.items()}
print(swapped)
# {1: 'a', 2: 'b'}
# 5. Manual Filter: Given a dictionary scores = {'math': 85, 'science': 90, 'history': 75} and a minimum score of 80, create a new dictionary containing only the subjects where the score is 80 or higher.
scores = {'math': 85, 'science': 90, 'history': 75}
min_score = 80

filtered = {subject: score for subject, score in scores.items() if score >= min_score}
print(filtered)
# {'math': 85, 'science': 90}
# 6. Character Frequency: Given a string "mississippi", create a dictionary that counts how many times each character appears.
text = "mississippi"
freq = {}

for char in text:
    freq[char] = freq.get(char, 0) + 1

print(freq)
# {'m': 1, 'i': 4, 's': 4, 'p': 2}
# 7. Data Merger: Given a dictionary of a person's information personal_info = {'name': 'Alice', 'age': 25} and a dictionary of their contact info contact_info = {'email': 'alice@example.com', 'phone': '555-1234'}, create a single dictionary that contains all the information from both.
personal_info = {'name': 'Alice', 'age': 25}
contact_info = {'email': 'alice@example.com', 'phone': '555-1234'}

merged_info = {**personal_info, **contact_info}
print(merged_info)


